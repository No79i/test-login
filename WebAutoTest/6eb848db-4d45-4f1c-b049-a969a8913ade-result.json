{"name": "test_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: chrome=122.0.6261.129)\nStacktrace:\n\tGetHandleVerifier [0x00007FF615FEAD22+56930]\n\t(No symbol) [0x00007FF615F5F622]\n\t(No symbol) [0x00007FF615E142E5]\n\t(No symbol) [0x00007FF615E1011A]\n\t(No symbol) [0x00007FF615E029F4]\n\t(No symbol) [0x00007FF615E03D29]\n\t(No symbol) [0x00007FF615E02CF3]\n\t(No symbol) [0x00007FF615E01EF4]\n\t(No symbol) [0x00007FF615E01E11]\n\t(No symbol) [0x00007FF615E00625]\n\t(No symbol) [0x00007FF615E00EDC]\n\t(No symbol) [0x00007FF615E169FD]\n\t(No symbol) [0x00007FF615E98B47]\n\t(No symbol) [0x00007FF615E7BC9A]\n\t(No symbol) [0x00007FF615E981E2]\n\t(No symbol) [0x00007FF615E7BA43]\n\t(No symbol) [0x00007FF615E4D438]\n\t(No symbol) [0x00007FF615E4E4D1]\n\tGetHandleVerifier [0x00007FF616366AAD+3709933]\n\tGetHandleVerifier [0x00007FF6163BFFED+4075821]\n\tGetHandleVerifier [0x00007FF6163B817F+4043455]\n\tGetHandleVerifier [0x00007FF616089756+706710]\n\t(No symbol) [0x00007FF615F6B8FF]\n\t(No symbol) [0x00007FF615F66AE4]\n\t(No symbol) [0x00007FF615F66C3C]\n\t(No symbol) [0x00007FF615F568F4]\n\tBaseThreadInitThunk [0x00007FF9E79B53E0+16]\n\tRtlUserThreadStart [0x00007FF9E886485B+43]", "trace": "fixturefunc = <function gotourl at 0x00000152E4FA5040>, request = <FixtureRequest for <Function test_login>>, kwargs = {'url': 'http://10.10.12.154:9901/'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n.venv\\lib\\site-packages\\_pytest\\fixtures.py:913: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nweb_01.py:21: in gotourl\n    driver.get(\"http://10.10.12.154:9901\")\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000152E4EE4970>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_TIMED_OUT\\\\n...07FF615F568F4]\\\\n\\\\tBaseThreadInitThunk [0x00007FF9E79B53E0+16]\\\\n\\\\tRtlUserThreadStart [0x00007FF9E886485B+43]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\nE         (Session info: chrome=122.0.6261.129)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF615FEAD22+56930]\nE       \t(No symbol) [0x00007FF615F5F622]\nE       \t(No symbol) [0x00007FF615E142E5]\nE       \t(No symbol) [0x00007FF615E1011A]\nE       \t(No symbol) [0x00007FF615E029F4]\nE       \t(No symbol) [0x00007FF615E03D29]\nE       \t(No symbol) [0x00007FF615E02CF3]\nE       \t(No symbol) [0x00007FF615E01EF4]\nE       \t(No symbol) [0x00007FF615E01E11]\nE       \t(No symbol) [0x00007FF615E00625]\nE       \t(No symbol) [0x00007FF615E00EDC]\nE       \t(No symbol) [0x00007FF615E169FD]\nE       \t(No symbol) [0x00007FF615E98B47]\nE       \t(No symbol) [0x00007FF615E7BC9A]\nE       \t(No symbol) [0x00007FF615E981E2]\nE       \t(No symbol) [0x00007FF615E7BA43]\nE       \t(No symbol) [0x00007FF615E4D438]\nE       \t(No symbol) [0x00007FF615E4E4D1]\nE       \tGetHandleVerifier [0x00007FF616366AAD+3709933]\nE       \tGetHandleVerifier [0x00007FF6163BFFED+4075821]\nE       \tGetHandleVerifier [0x00007FF6163B817F+4043455]\nE       \tGetHandleVerifier [0x00007FF616089756+706710]\nE       \t(No symbol) [0x00007FF615F6B8FF]\nE       \t(No symbol) [0x00007FF615F66AE4]\nE       \t(No symbol) [0x00007FF615F66C3C]\nE       \t(No symbol) [0x00007FF615F568F4]\nE       \tBaseThreadInitThunk [0x00007FF9E79B53E0+16]\nE       \tRtlUserThreadStart [0x00007FF9E886485B+43]\n\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "description": "login.feature: 正常登录", "start": 1710754732657, "stop": 1710754774876, "uuid": "cc4a90e3-35a5-4c97-ba68-01bea7a5c1b0", "historyId": "249620abe502ac1ac01f9e0146139071", "testCaseId": "249620abe502ac1ac01f9e0146139071", "fullName": "web_01#test_login", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures"}, {"name": "suite", "value": "web_01"}, {"name": "host", "value": "dc"}, {"name": "thread", "value": "9124-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "web_01"}]}